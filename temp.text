Program : ProcedureList { 
            // $$ = new ProgramImpl($1);
            // ast = $$;
            }
        ;

ProcedureList : Procedure { //$$ = new std::list<Proc_ptr>{};
              //  $$->push_front($1);     
              }
              | Procedure ProcedureList {
                    // $$ = $2;
                    // $$->push_front($1);
                }
              ;


Procedure : PROCEDURE IDENTIFIER LPAREN ParamList RPAREN RETURN Type LBRACE Body OptionalReturn RBRACE {
           // $$ = new ProcImpl(NULL, NULL, NULL, NULL);
            }
          ;



FunctionCall : IDENTIFIER LPAREN ArgumentList RPAREN SEMICOLON { /* Handle function call here */ };

Expression : Expression OR Expression { /* $$ = new Or($1, $3); */  }
           | Expression AND Expression { /* $$ = new And($1, $3); */ }
           | Expression EQUALS Expression { /*  $$ = new Compare($1, $3); */ }
           | Expression NOTEQUAL Expression { /*$$ = new Noteq($1, $3);*/ }
           | Expression LT Expression {/* $$ = new Lt($1, $3); */}
           | Expression LTE Expression {/* $$ = new Lteq($1, $3);*/ }
           | Expression GT Expression {/* $$ = new Gt($1, $3); */}
           | Expression GTE Expression {/* $$ = new Gteq($1, $3);*/ }
           | AdditiveExpr {/* $$ = $1; */}
           ; 


AdditiveExpr : AdditiveExpr PLUS MultiplicativeExpr {/* $$ = new Plus($1, $3); */}
             | AdditiveExpr MINUS MultiplicativeExpr {/* $$ = new Minus($1, $3);*/ }
             | MultiplicativeExpr {/* $$ = $1; */}
             ;

MultiplicativeExpr : MultiplicativeExpr MUL UnaryExpr {/* $$ = new Times($1, $3); */}
                   | MultiplicativeExpr DIV UnaryExpr { /*$$ = new Div($1, $3);*/ }
                   | UnaryExpr {/* $$ = $1;*/ }
                   ;

UnaryExpr : NOT UnaryExpr {/* $$ = new Not($2); */}
          | MINUS UnaryExpr %prec UMINUS { /*$$ = new Uminus($2);*/ }
          | AMP Variable {/* $$ = new AddressOf($2);*/ }
          | DEREFERENCE IDENTIFIER {/* $$ = new Deref(new Ident(new SymName($2))); */}
          | DEREFERENCE Expression {/* $$ = new Deref($2); */}
          | DEREFERENCE IDENTIFIER LBRACKET INT_LITERAL RBRACKET { } // need to do
          | BAR Expression BAR { /*$$ = new AbsoluteValue($2);*/ }
          | PrimaryExpr {/* $$ = $1;*/ }
          ;

Variable : IDENTIFIER 
         | IDENTIFIER LBRACKET Expression RBRACKET 
         ;

PrimaryExpr : IDENTIFIER { /*$$ = new Ident(new SymName($1)); */}
            | INT_LITERAL {/* $$ = new IntLit(new Primitive($1)); */}
            | LPAREN Expression RPAREN {/* $$ = $2;*/}
            | IDENTIFIER LBRACKET Expression RBRACKET { /*$$ = new ArrayAccess(new SymName($1), $3);*/ }
            | CHAR_LITERAL { /*$$ = new CharLit(new Primitive($1));*/ }
            | TRUE {/* $$ = new BoolLit(new Primitive(true)); */}
            | FALSE { /*$$ = new BoolLit(new Primitive(false)); */}
            | NULLTOKEN { } // need to do 
            ;